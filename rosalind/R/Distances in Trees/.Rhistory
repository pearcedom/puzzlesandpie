basal <- read.delim("/Volumes/igmm/sims-lab/Dominic/Projects/Cut Sites/Datasets/TCGA-BRCA/by-subtype/TCGA cutpoint analysis/Basal.txt") %>% colnames() %>%
gsub("\\.", "\\-", .)
her2 <- read.delim("/Volumes/igmm/sims-lab/Dominic/Projects/Cut Sites/Datasets/TCGA-BRCA/by-subtype/TCGA cutpoint analysis/Her2.txt") %>% colnames() %>%
gsub("\\.", "\\-", .)
luma <- read.delim("/Volumes/igmm/sims-lab/Dominic/Projects/Cut Sites/Datasets/TCGA-BRCA/by-subtype/TCGA cutpoint analysis/LumA.txt") %>% colnames() %>%
gsub("\\.", "\\-", .)
lumb <- read.delim("/Volumes/igmm/sims-lab/Dominic/Projects/Cut Sites/Datasets/TCGA-BRCA/by-subtype/TCGA cutpoint analysis/LumB.txt") %>% colnames() %>%
gsub("\\.", "\\-", .)
srv.bsl <- srv[basal,]
srv.hr2 <- srv[her2,]
srv.lma <- srv[luma,]
srv.lmb <- srv[lumb,]
srv.lmb
cbind(srv.lma, srv.lmb)
cbind(unname(srv.lma), unname(srv.lmb))
intersect(basal, her2, luma, lumb)
intersect(basal, her2, luma, lumb)
intersect(basal, her2)
intersect(basal, luma)
intersect(luma, lumb)
View(srv.bsl)
library(readr)
#write.table(HRbootstrap.mtx, "./HRbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
bootstrapCut <- function(survdata, write.path = getwd()){
nsamples <- nrow(survdata) #number of samples
# Create cut matrix
cuts <- matrix(nrow = nsamples, ncol = nsamples - 1)
colnames(cuts) <- 1:ncol(cuts)
for (k in 1:ncol(cuts)){cuts[,k] <- rep(c(1, 2), c(k, nrow(cuts)-k))}
start <- Sys.time()
no.perms <- 10000
HRbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
PVALbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
permutation.mtx <- matrix(nrow = nsamples, ncol = no.perms)
for (i in 1:no.perms) {
rand.ord <- sample(1:nsamples, nsamples, replace = TRUE)
permutation.mtx[,i] <- rand.ord
data.ordered <- cbind(data.frame(survdata[rand.ord,]), cuts)
HRbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x) hazard.ratio(data.ordered[, x],
data.ordered[,"Time"],
data.ordered[,"Event"],
na.rm = TRUE)[["hazard.ratio"]]))
PVALbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
1 - pchisq(survdiff(Surv(Time, Event) ~ get(x),
data = data.ordered)$chisq, 1)))
}
Sys.time() - start
#Write out
#write.table(HRbootstrap.mtx, "./HRbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(PVALbootstrap.mtx, "./PVALbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(permutation.mtx, "./permutation-mtx-TCGA-BRCA.txt", sep = "\t")
boostrap.out <- list(HRbootstrap.mtx,
PVALbootstrap.mtx,
permutation.mtx)
write_rds(boostrap.out, write.path)
}
bootstrapCut <- function(survdata, perms = 500, write.path = getwd()){
nsamples <- nrow(survdata) #number of samples
# Create cut matrix
cuts <- matrix(nrow = nsamples, ncol = nsamples - 1)
colnames(cuts) <- 1:ncol(cuts)
for (k in 1:ncol(cuts)){cuts[,k] <- rep(c(1, 2), c(k, nrow(cuts)-k))}
start <- Sys.time()
no.perms <- perms
HRbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
PVALbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
permutation.mtx <- matrix(nrow = nsamples, ncol = no.perms)
for (i in 1:no.perms) {
rand.ord <- sample(1:nsamples, nsamples, replace = TRUE)
permutation.mtx[,i] <- rand.ord
data.ordered <- cbind(data.frame(survdata[rand.ord,]), cuts)
HRbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x) hazard.ratio(data.ordered[, x],
data.ordered[,"Time"],
data.ordered[,"Event"],
na.rm = TRUE)[["hazard.ratio"]]))
PVALbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
1 - pchisq(survdiff(Surv(Time, Event) ~ get(x),
data = data.ordered)$chisq, 1)))
}
Sys.time() - start
#Write out
#write.table(HRbootstrap.mtx, "./HRbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(PVALbootstrap.mtx, "./PVALbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(permutation.mtx, "./permutation-mtx-TCGA-BRCA.txt", sep = "\t")
boostrap.out <- list(HRbootstrap.mtx,
PVALbootstrap.mtx,
permutation.mtx)
write_rds(boostrap.out, write.path)
}
bootstrapCut <- function(survdata, perms = 500, write.path = getwd()){
nsamples <- nrow(survdata) #number of samples
# Create cut matrix
cuts <- matrix(nrow = nsamples, ncol = nsamples - 1)
colnames(cuts) <- 1:ncol(cuts)
for (k in 1:ncol(cuts)){cuts[,k] <- rep(c(1, 2), c(k, nrow(cuts)-k))}
start <- Sys.time()
no.perms <- perms
HRbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
PVALbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
permutation.mtx <- matrix(nrow = nsamples, ncol = no.perms)
for (i in 1:no.perms) {
rand.ord <- sample(1:nsamples, nsamples, replace = TRUE)
permutation.mtx[,i] <- rand.ord
data.ordered <- cbind(data.frame(survdata[rand.ord,]), cuts)
HRbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x) hazard.ratio(data.ordered[, x],
data.ordered[,"Time"],
data.ordered[,"Event"],
na.rm = TRUE)[["hazard.ratio"]]))
PVALbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
1 - pchisq(survdiff(Surv(Time, Event) ~ get(x),
data = data.ordered)$chisq, 1)))
}
Sys.time() - start
#Write out
#write.table(HRbootstrap.mtx, "./HRbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(PVALbootstrap.mtx, "./PVALbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(permutation.mtx, "./permutation-mtx-TCGA-BRCA.txt", sep = "\t")
boostrap.out <- list(HRbootstrap.mtx,
PVALbootstrap.mtx,
permutation.mtx)
boostrap.out
#write_rds(boostrap.out, write.path)
}
asdf <- bootstrapCut(srv.hr2, perms = 2)
bootstrapCut <- function(survdata, perms = 500, write.path = getwd()){
library(prodlim)
library(survival)
library(survcomp)
library(data.table)
nsamples <- nrow(survdata) #number of samples
# Create cut matrix
cuts <- matrix(nrow = nsamples, ncol = nsamples - 1)
colnames(cuts) <- 1:ncol(cuts)
for (k in 1:ncol(cuts)){cuts[,k] <- rep(c(1, 2), c(k, nrow(cuts)-k))}
start <- Sys.time()
no.perms <- perms
HRbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
PVALbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
permutation.mtx <- matrix(nrow = nsamples, ncol = no.perms)
for (i in 1:no.perms) {
rand.ord <- sample(1:nsamples, nsamples, replace = TRUE)
permutation.mtx[,i] <- rand.ord
data.ordered <- cbind(data.frame(survdata[rand.ord,]), cuts)
HRbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x) hazard.ratio(data.ordered[, x],
data.ordered[,"Time"],
data.ordered[,"Event"],
na.rm = TRUE)[["hazard.ratio"]]))
PVALbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
1 - pchisq(survdiff(Surv(Time, Event) ~ get(x),
data = data.ordered)$chisq, 1)))
}
Sys.time() - start
#Write out
#write.table(HRbootstrap.mtx, "./HRbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(PVALbootstrap.mtx, "./PVALbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(permutation.mtx, "./permutation-mtx-TCGA-BRCA.txt", sep = "\t")
boostrap.out <- list(HRbootstrap.mtx,
PVALbootstrap.mtx,
permutation.mtx)
boostrap.out
#write_rds(boostrap.out, write.path)
}
asdf <- bootstrapCut(srv.hr2, perms = 2)
asdf
system.time(asdf <- bootstrapCut(srv.hr2, perms = 2))
system.time(asdf <- bootstrapCut(srv.hr2, perms = 10))
system.time(asdf <- bootstrapCut(srv.hr2, perms = 20))
system.time(asdf <- bootstrapCut(srv.hr2, perms = 500))
system.time(try(asdf <- bootstrapCut(srv.hr2, perms = 500)))
asdf[[1]]
system.time(asdf <- try(bootstrapCut(srv.hr2, perms = 500)))
asdf
bootstrapCut <- function(survdata, perms = 500, write.path = getwd()){
library(prodlim)
library(survival)
library(survcomp)
library(data.table)
nsamples <- nrow(survdata) #number of samples
# Create cut matrix
cuts <- matrix(nrow = nsamples, ncol = nsamples - 1)
colnames(cuts) <- 1:ncol(cuts)
for (k in 1:ncol(cuts)){cuts[,k] <- rep(c(1, 2), c(k, nrow(cuts)-k))}
start <- Sys.time()
no.perms <- perms
HRbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
PVALbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
permutation.mtx <- matrix(nrow = nsamples, ncol = no.perms)
for (i in 1:no.perms) {
rand.ord <- sample(1:nsamples, nsamples, replace = TRUE)
permutation.mtx[,i] <- rand.ord
data.ordered <- cbind(data.frame(survdata[rand.ord,]), cuts)
HRbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x) try(hazard.ratio(data.ordered[, x],
data.ordered[,"Time"],
data.ordered[,"Event"],
na.rm = TRUE))[["hazard.ratio"]]))
PVALbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
1 - try(pchisq(survdiff(Surv(Time, Event) ~ get(x),
data = data.ordered)$chisq, 1))))
}
Sys.time() - start
#Write out
#write.table(HRbootstrap.mtx, "./HRbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(PVALbootstrap.mtx, "./PVALbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(permutation.mtx, "./permutation-mtx-TCGA-BRCA.txt", sep = "\t")
boostrap.out <- list(HRbootstrap.mtx,
PVALbootstrap.mtx,
permutation.mtx)
boostrap.out
#write_rds(boostrap.out, write.path)
}
system.time(asdf <- bootstrapCut(srv.hr2, perms = 500))
table(srv.hr2$Event)
sample(1:nrow(srv.bsl), nrow(srv.bsl))
sample(1:nrow(srv.hr2), nrow(srv.hr2))
sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE)
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),]
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),] %>% table(.[2])
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()[2]
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.bsl[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
bootstrapCut <- function(survdata, perms = 500, write.path = getwd()){
library(prodlim)
library(survival)
library(survcomp)
library(data.table)
nsamples <- nrow(survdata) #number of samples
# Create cut matrix
cuts <- matrix(nrow = nsamples, ncol = nsamples - 1)
colnames(cuts) <- 1:ncol(cuts)
for (k in 1:ncol(cuts)){cuts[,k] <- rep(c(1, 2), c(k, nrow(cuts)-k))}
start <- Sys.time()
no.perms <- perms
HRbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
PVALbootstrap.mtx <- matrix(nrow = nsamples - 1, ncol = no.perms)
permutation.mtx <- matrix(nrow = nsamples, ncol = no.perms)
for (i in 1:no.perms) {
rand.ord <- sample(1:nsamples, nsamples, replace = TRUE)
permutation.mtx[,i] <- rand.ord
data.ordered <- cbind(data.frame(survdata[rand.ord,]), cuts)
HRbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x) hazard.ratio(data.ordered[, x],
data.ordered[,"Time"],
data.ordered[,"Event"],
na.rm = TRUE)[["hazard.ratio"]]))
PVALbootstrap.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
1 - pchisq(survdiff(Surv(Time, Event) ~ get(x),
data = data.ordered)$chisq, 1)))
}
Sys.time() - start
#Write out
#write.table(HRbootstrap.mtx, "./HRbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(PVALbootstrap.mtx, "./PVALbootstrap-mtx-TCGA-BRCA.txt", sep = "\t")
#write.table(permutation.mtx, "./permutation-mtx-TCGA-BRCA.txt", sep = "\t")
boostrap.out <- list(HRbootstrap.mtx,
PVALbootstrap.mtx,
permutation.mtx)
boostrap.out
#write_rds(boostrap.out, write.path)
}
system.time(asdf <- bootstrapCut(srv.bsl, perms = 10))
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% table()
asdf
system.time(asdf <- bootstrapCut(srv.bsl, perms = 50))
nsamples <- nrow(survdata) #number of samples
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% unique() %>% length()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% unique() %>% length()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% unique() %>% length()
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2]
srv.hr2[sample(1:nrow(srv.hr2), nrow(srv.hr2), replace = TRUE),][2] %>% unique()
srv.lmb <- srv[lumb,] %>% na.omit()
srv.bsl <- srv[basal,] %>% na.omit()
srv.hr2 <- srv[her2,] %>% na.omit()
srv.lma <- srv[luma,] %>% na.omit()
srv.lmb <- srv[lumb,] %>% na.omit()
system.time(asdf <- bootstrapCut(srv.bsl, perms = 50))
beepr::beep()
system.time(bsl.bstrap <- bootstrapCut(srv.bsl, perms = 600))
system.time(hr2.bstrap <- bootstrapCut(srv.hr2, perms = 600))
system.time(lmb.bstrap <- bootstrapCut(srv.lmb, perms = 600))
system.time(lma.bstrap <- bootstrapCut(srv.lma, perms = 600))
View(bsl.bstrap[[1]])
View(srv.hr2)
View(hr2.bstrap[[1]])
sapply(hr2.bstrap[[1]], mean)
sapply(data.frame(hr2.bstrap[[1]]), mean)
sapply(data.frame(hr2.bstrap[[1]]), function(x) mean(x, na.rm = TRUE))
plot(sapply(data.frame(hr2.bstrap[[1]]), function(x) mean(x, na.rm = TRUE)))
hist(sapply(data.frame(hr2.bstrap[[1]]), function(x) mean(x, na.rm = TRUE)))
plot(sapply(data.frame(hr2.bstrap[[1]]), function(x) mean(x, na.rm = TRUE)))
hr2.bstrap[1]
sort(hr2.bstrap[[1]])
head(sort(hr2.bstrap[[1]]))
head(sort(hr2.bstrap[[1]], decreasing = TRUE))
head(sort(bsl.bstrap[[1]], decreasing = TRUE))
hr2.bstrap[3]
hr2.bstrap[3][,31]
hr2.bstrap[[3]][,31]
hr2.bstrap[[3]][,31] %>% srv.hr2[.,]
log2(0)
log2(1)
log2(0.001)
log2(12)
log2(12 + 1)
log2(12 + 0.001)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, fig.align = 'center', fig.width = 12, fig.height = 7)
library(ggplot2)
library(ggthemes)
library(purrr)
library(knitr)
# Chunk 2
pheno <- feather::read_feather("~/Desktop/tmp.txt")
ggplot(pheno, aes(x = sample.probe_ord, y = probes, fill = selection)) + geom_bar(stat = 'identity') +
geom_hline(yintercept = 5000, linetype = 3) +
theme_pander() +
scale_fill_economist() +
theme(legend.position = 'top',
axis.text.x = element_text(angle = 45))
# Chunk 3
selection <- map_int(c(27, 28, 50, 51, 16, 17), function(x) which(pheno$sample.id == x))
ggplot(pheno[selection,], aes(x = sample.probe_ord, y = probes, fill = patient.id)) + geom_bar(stat = 'identity') +
geom_hline(yintercept = 5000, linetype = 3) +
theme_pander() +
scale_fill_economist() +
theme(legend.position = 'top',
axis.text.x = element_text(angle = 45),
axis.title.x = element_blank())
# Chunk 4
pheno.select <- pheno[selection, -c(5, 6, 7)]
colnames(pheno.select) <- c("Hyibridisation.ID", "Patient.ID", "Sample.type", "Probes")
kable(pheno.select)
selection <- map_int(c(27, 28, 50, 51, 16, 17), function(x) which(pheno$sample.id == x))
ggplot(pheno[selection,], aes(x = sample.probe_ord, y = probes, fill = patient.id)) + geom_bar(stat = 'identity') +
geom_hline(yintercept = 5000, linetype = 3) +
theme_pander() +
scale_fill_economist() +
theme(legend.position = 'top',
axis.text.x = element_text(angle = 45),
axis.title.x = element_blank())
ggplot(pheno, aes(x = sample.probe_ord, y = probes, fill = selection)) + geom_bar(stat = 'identity') +
geom_hline(yintercept = 5000, linetype = 3) +
theme_pander() +
scale_fill_economist() +
theme(legend.position = 'top',
axis.text.x = element_text(angle = 45))
pheno
pheno[order(pheno$probes),]
selection <- map_int(c(27, 28, 50, 51, 16, 17, 72, 69, 49, 23, 4, 33, 39, 36, 75, 45), function(x) which(pheno$sample.id == x))
ggplot(pheno[selection,], aes(x = sample.probe_ord, y = probes, fill = patient.id)) + geom_bar(stat = 'identity') +
geom_hline(yintercept = 5000, linetype = 3) +
theme_pander() +
scale_fill_economist() +
theme(legend.position = 'top',
axis.text.x = element_text(angle = 45),
axis.title.x = element_blank())
```
selection <- map_int(c(27, 28, 50, 51, 16, 17, 72, 69, 49, 23, 4, 33, 39, 36, 75, 45), function(x) which(pheno$sample.id == x))
ggplot(pheno[selection,], aes(x = sample.probe_ord, y = probes, fill = patient.id)) + geom_bar(stat = 'identity') +
geom_hline(yintercept = 5000, linetype = 3) +
theme_pander() +
scale_fill_economist() +
theme(legend.position = 'top',
axis.text.x = element_text(angle = 45),
axis.title.x = element_blank())
selection <- map_int(c(27, 28, 50, 51, 16, 17, 72, 69, 49, 23, 4, 33, 39, 36, 75, 45), function(x) which(pheno$sample.id == x))
selection
ggplot(pheno[selection,], aes(x = sample.probe_ord, y = probes, fill = patient.id)) + geom_bar(stat = 'identity') +
geom_hline(yintercept = 5000, linetype = 3) +
theme_pander() +
scale_fill_economist() +
theme(legend.position = 'top',
axis.text.x = element_text(angle = 45),
axis.title.x = element_blank())
ggplot(pheno[selection,], aes(x = sample.probe_ord, y = probes, fill = patient.id)) + geom_bar(stat = 'identity') +
geom_hline(yintercept = 5000, linetype = 3) +
theme_pander() +
#scale_fill_economist() +
theme(legend.position = 'top',
axis.text.x = element_text(angle = 45),
axis.title.x = element_blank())
pheno[selection,]
pheno.select <- pheno[selection, -c(5, 6, 7)]
colnames(pheno.select) <- c("Hyibridisation.ID", "Patient.ID", "Sample.type", "Probes")
kable(pheno.select)
selection2 <- map_int(c(27, 28, 50, 51, 16, 17, 72, 69, 49, 23, 4, 33, 39, 36, 75, 45), function(x) which(pheno$sample.id == x))
pheno.select <- pheno[selection2, -c(5, 6, 7)]
colnames(pheno.select) <- c("Hyibridisation.ID", "Patient.ID", "Sample.type", "Probes")
kable(pheno.select)
source('/Volumes/igmm/sims-lab/Dominic/Labbook/FF/linear programming.R', echo=TRUE)
install.packages("lpSolve")
source('/Volumes/igmm/sims-lab/Dominic/Labbook/FF/linear programming.R', echo=TRUE)
df <- ldply(1:612, function(x){
# Scrape responsibly kids, we don't want to ddos
# the Fantasy Premier League's website
Sys.sleep(0.05)
print(sprintf('Scraping player %s', x))
url <- sprintf("http://fantasy.premierleague.com/web/api/elements/%s/?format=json", x)
json <- fromJSON(getURL(url))
json$now_cost <- json$now_cost / 10
data.frame(json[names(json) %in% c('web_name', 'team_name', 'type_name',
'now_cost', 'total_points')])
})
library(XML)
theurl <- "https://fantasy.premierleague.com/player-list/"
theurl
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
n.rows
