cuts <- matrix(nrow = nrow(surv.data), ncol = nrow(surv.data) - 1)
colnames(cuts) <- 1:ncol(cuts)
for (i in 1:ncol(cuts)) {
cuts[,i] <- rep(c(1, 2), c(i, nrow(cuts) - i))
}
colnames(cuts) <- paste0("X", colnames(cuts))
cuts
nrow(data)
data
hratio.mtx <- matrix(nrow = ncol(cuts), ncol = ncol(data))
data.base <- exp.data[geneset,]
d
data.base
data <- as.data.table(data.base)
data
hratio.mtx <- matrix(nrow = ncol(cuts), ncol = ncol(data))
hratio.mtx
1:ncol(data)
for (i in 1:ncol(data)) {
data.ordered <- cbind(data.frame(surv.dfr[order(data[i,]),]), cuts)
hratio.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
hazard.ratio(data.ordered[, x],
data.ordered[,as.character(time)],
data.ordered[,as.character(event)],
na.rm = TRUE)[["hazard.ratio"]]))
}
hratio.mtx[,i]
colnames(cuts)
data.ordered[, x]
x = colnames(cuts)[1]
x
data.ordered[, x]
data.ordered[,as.character(time)]
as.character(time)
data.ordered
1800 /30
data.ordered[,as.character(event)]
pData(eset_er)
srv
surv
surv.data = surv
surv.dfr <- as.data.table(surv.data)
surv.dfr
for (i in 1:ncol(data)) {
data.ordered <- cbind(data.frame(surv.dfr[order(data[i,]),]), cuts)
hratio.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
hazard.ratio(data.ordered[, x],
data.ordered[,as.character(time)],
data.ordered[,as.character(event)],
na.rm = TRUE)[["hazard.ratio"]]))
}
hratio.mtx
for (i in 1:ncol(cuts)) {
cuts[,i] <- rep(c(1, 2), c(i, nrow(cuts) - i))
}
hratio.mtx <- matrix(nrow = ncol(cuts), ncol = ncol(data))
for (i in 1:ncol(data)) {
data.ordered <- cbind(data.frame(surv.dfr[order(data[i,]),]), cuts)
hratio.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
hazard.ratio(data.ordered[, x],
data.ordered[,as.character(time)],
data.ordered[,as.character(event)],
na.rm = TRUE)[["hazard.ratio"]]))
}
hratio.mtx
surv.dfr
data.ordered
for (i in 1:nrow(data)) {
data.ordered <- cbind(data.frame(surv.dfr[order(data[i,]),]), cuts)
hratio.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
hazard.ratio(data.ordered[, x],
data.ordered[,as.character(time)],
data.ordered[,as.character(event)],
na.rm = TRUE)[["hazard.ratio"]]))
}
data.base <- exp.data[geneset,]
data <- as.data.table(data.base)
surv.dfr <- as.data.table(surv.data)
cuts <- matrix(nrow = nrow(surv.data), ncol = nrow(surv.data) - 1)
colnames(cuts) <- 1:ncol(cuts)
for (i in 1:ncol(cuts)) {
cuts[,i] <- rep(c(1, 2), c(i, nrow(cuts) - i))
}
colnames(cuts) <- paste0("X", colnames(cuts))
hratio.mtx <- matrix(nrow = ncol(cuts), ncol = ncol(data))
for (i in 1:nrow(data)) {
data.ordered <- cbind(data.frame(surv.dfr[order(data[i,]),]), cuts)
hratio.mtx[,i] <- unlist(lapply(colnames(cuts), function(x)
hazard.ratio(data.ordered[, x],
data.ordered[,as.character(time)],
data.ordered[,as.character(event)],
na.rm = TRUE)[["hazard.ratio"]]))
}
hratio.mtx
source("//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/Functions/cut-points/masterDichotPlot.R")
source("//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/Functions/cut-points/masterDichotPlot.R")
plotDichot(xpr = exprs(eset_er), surv = pData(eset_er), time = "t.dmfs", event = "e.dmfs", geneset = "208079_s_at")
source("scrapeFF.R")
library(tidyverse)
scrapeFF()
gw_dfr <- read_tsv("../scrapes/2016-12-10.txt")
previous_dfr <- read_tsv("../lineup-select/teams/team-2016-12-03.txt")
money_bank <- 0.2 * 10
library(tidyverse)
library(lpSolve)
previous_binary <- rep(0, nrow(gw_dfr))
for(i in previous_dfr$code){
previous_binary[which(gw_dfr$code == i)] <- 1
}
sub_objective <- gw_dfr$total_points
max_cost <- sum(gw_dfr[gw_dfr$previous == 1,]$now_cost) + money_bank
num_gk <- 2
num_mid <- 5
num_fwd <- 3
gw_dfr$Goalkeeper <- ifelse(gw_dfr$element_type == "GK", 1, 0)
gw_dfr$Defender <- ifelse(gw_dfr$element_type == "DEF", 1, 0)
gw_dfr$Midfielder <- ifelse(gw_dfr$element_type == "MID", 1, 0)
likelihood <- gw_dfr$chance_of_playing_next_round
gw_dfr$likelihood <- ifelse(is.na(likelihood), 0, ifelse(likelihood >= 75, 0, 1))
sub_team_constraint <- sapply(unique(gw_dfr$team.y), function(x) ifelse(gw_dfr$team.y == x, 1, 0), USE.NAMES = TRUE) %>%
as_tibble %>%
t
sub_const_mat <- rbind(gw_dfr$Goalkeeper, gw_dfr$Defender, gw_dfr$Midfielder, gw_dfr$Forward, gw_dfr$likelihood, gw_dfr$now_cost,   sub_team_constraint, gw_dfr$previous)
sub_const_dir <- c("=", "=", "=", "=","<=", rep("<=", 21), "=")
sub_const_rhs <- c(num_gk, num_def, num_mid, num_fwd, 2, max_cost, rep(3, 20), 14)
num_def <- 5
num_mid <- 5
num_fwd <- 3
gw_dfr$Goalkeeper <- ifelse(gw_dfr$element_type == "GK", 1, 0)
gw_dfr$Defender <- ifelse(gw_dfr$element_type == "DEF", 1, 0)
gw_dfr$Midfielder <- ifelse(gw_dfr$element_type == "MID", 1, 0)
gw_dfr$Forward <- ifelse(gw_dfr$element_type == "FWD", 1, 0)
likelihood <- gw_dfr$chance_of_playing_next_round
gw_dfr$likelihood <- ifelse(is.na(likelihood), 0, ifelse(likelihood >= 75, 0, 1))
sub_team_constraint <- sapply(unique(gw_dfr$team.y), function(x) ifelse(gw_dfr$team.y == x, 1, 0), USE.NAMES = TRUE) %>%
as_tibble %>%
t
sub_const_mat <- rbind(gw_dfr$Goalkeeper, gw_dfr$Defender, gw_dfr$Midfielder, gw_dfr$Forward, gw_dfr$likelihood, gw_dfr$now_cost,   sub_team_constraint, gw_dfr$previous)
sub_const_dir <- c("=", "=", "=", "=","<=", rep("<=", 21), "=")
sub_const_rhs <- c(num_gk, num_def, num_mid, num_fwd, 2, max_cost, rep(3, 20), 14)
w_dfr
gw_dfr
previous_dfr
previous_dfr <- read_tsv("../lineup-select/teams/team-2016-11-26.txt")
money_bank <- 0.2 * 10
library(tidyverse)
library(lpSolve)
previous_binary <- rep(0, nrow(gw_dfr))
for(i in previous_dfr$code){
previous_binary[which(gw_dfr$code == i)] <- 1
}
gw_dfr$previous <- previous_binary
sub_objective <- gw_dfr$total_points
max_cost <- sum(gw_dfr[gw_dfr$previous == 1,]$now_cost) + money_bank
num_gk <- 2
num_def <- 5
num_mid <- 5
num_fwd <- 3
gw_dfr$Goalkeeper <- ifelse(gw_dfr$element_type == "GK", 1, 0)
gw_dfr$Defender <- ifelse(gw_dfr$element_type == "DEF", 1, 0)
gw_dfr$Midfielder <- ifelse(gw_dfr$element_type == "MID", 1, 0)
gw_dfr$Forward <- ifelse(gw_dfr$element_type == "FWD", 1, 0)
likelihood <- gw_dfr$chance_of_playing_next_round
gw_dfr$likelihood <- ifelse(is.na(likelihood), 0, ifelse(likelihood >= 75, 0, 1))
sub_team_constraint <- sapply(unique(gw_dfr$team.y), function(x) ifelse(gw_dfr$team.y == x, 1, 0), USE.NAMES = TRUE) %>%
as_tibble %>%
t
sub_const_mat <- rbind(gw_dfr$Goalkeeper, gw_dfr$Defender, gw_dfr$Midfielder, gw_dfr$Forward, gw_dfr$likelihood, gw_dfr$now_cost,   sub_team_constraint, gw_dfr$previous)
sub_const_dir <- c("=", "=", "=", "=","<=", rep("<=", 21), "=")
sub_const_rhs <- c(num_gk, num_def, num_mid, num_fwd, 2, max_cost, rep(3, 20), 14)
sub_x <- lp("max", sub_objective, sub_const_mat, sub_const_dir, sub_const_rhs, all.bin=TRUE, all.int=TRUE)
sub_out <- gw_dfr[which(sub_x$solution==1), c("first_name", "second_name", "now_cost", "team.y", "element_type", "total_points",    "code")]
sub_out
write_tsv(sub_out, paste0("../lineup-select/teams/team-", Sys.Date(), ".txt"))
scrapeFF <- function(x){
library(jsonlite)
library(tidyverse)
ff.list <- fromJSON("https://fantasy.premierleague.com/drf/bootstrap-static")
ff.dfr_base <- as_tibble(ff.list$elements)
ff.dfr_base$element_type <- ifelse(ff.dfr_base$element_type == 1, "GK",
ifelse(ff.dfr_base$element_type == 2, "DEF",
ifelse(ff.dfr_base$element_type == 3, "MID", "FWD")))
teams_dfr <- tibble(team_code = c(3, 91, 90, 8, 31, 20, 11, 43, 88, 13, 14, 110, 1, 25, 56, 80, 21, 6, 57, 35), team = c("Arsenal", "Bournemouth", "Burnley", "Chelsea", "Crystal Palace", "Southampton", "Everton", "Man City", "Hull", "Leicester", "Liverpool", "Stoke", "Man Utd", "Middlesbrough", "Sunderland", "Swansea", "West Ham", "Tottenham", "Watford", "West Brom"))
dfr_out <- merge(ff.dfr_base, teams_dfr, by = "team_code") %>% as_tibble()
write_tsv(dfr_out, paste0("../scrapes/", Sys.Date(), ".txt"))
}
scrapeFF()
source("scrapeFF.R")
library(tidyverse)
scrapeFF()
scrapeFF()
setwd("/Users/domin/Documents/FF/")
scrapeFF()
scrapeFF()
source("scrapeFF.R")
library(tidyverse)
library(tidyverse)
scrapeFF()
scrapeFF()
gw_dfr <- read_tsv("../scrapes/2016-12-10.txt")
library(tidyverse)
gw_dfr <- read_tsv("../scrapes/2016-01-01.txt")
source("scrapeFF.R")
setwd("/Users/domin/Documents/FF/")
source("scrapeFF.R")
library(tidyverse)
scrapeFF()
gw_dfr <- read_tsv("../scrapes/2016-01-01.txt")
gw_dfr <- read_tsv("../scrapes/2017-01-02.txt")
money_bank <- 100 * 10
library(tidyverse)
library(lpSolve)
previous_binary <- rep(0, nrow(gw_dfr))
for(i in previous_dfr$code){
previous_binary[which(gw_dfr$code == i)] <- 1
}
gw_dfr$previous <- previous_binary
sub_objective <- gw_dfr$total_points
max_cost <- sum(gw_dfr[gw_dfr$previous == 1,]$now_cost) + money_bank
num_gk <- 2
num_def <- 5
num_mid <- 5
num_fwd <- 3
gw_dfr$Goalkeeper <- ifelse(gw_dfr$element_type == "GK", 1, 0)
gw_dfr$Defender <- ifelse(gw_dfr$element_type == "DEF", 1, 0)
gw_dfr$Midfielder <- ifelse(gw_dfr$element_type == "MID", 1, 0)
gw_dfr$Forward <- ifelse(gw_dfr$element_type == "FWD", 1, 0)
likelihood <- gw_dfr$chance_of_playing_next_round
gw_dfr$likelihood <- ifelse(is.na(likelihood), 0, ifelse(likelihood >= 75, 0, 1))
sub_team_constraint <- sapply(unique(gw_dfr$team.y), function(x) ifelse(gw_dfr$team.y == x, 1, 0), USE.NAMES = TRUE) %>%
as_tibble %>%
t
sub_const_mat <- rbind(gw_dfr$Goalkeeper, gw_dfr$Defender, gw_dfr$Midfielder, gw_dfr$Forward, gw_dfr$likelihood, gw_dfr$now_cost,   sub_team_constraint, gw_dfr$previous)
sub_const_dir <- c("=", "=", "=", "=","<=", rep("<=", 21), "=")
sub_const_rhs <- c(num_gk, num_def, num_mid, num_fwd, 2, max_cost, rep(3, 20), 14)
sub_x <- lp("max", sub_objective, sub_const_mat, sub_const_dir, sub_const_rhs, all.bin=TRUE, all.int=TRUE)
sub_x
sub_out
sub_const_mat <- rbind(gw_dfr$Goalkeeper, gw_dfr$Defender, gw_dfr$Midfielder, gw_dfr$Forward, gw_dfr$likelihood, gw_dfr$now_cost,   sub_team_constraint)#, gw_dfr$previous)
sub_const_dir <- c("=", "=", "=", "=","<=", rep("<=", 21))#, "=")
sub_const_rhs <- c(num_gk, num_def, num_mid, num_fwd, 2, max_cost, rep(3, 20))#, 14)
sub_x <- lp("max", sub_objective, sub_const_mat, sub_const_dir, sub_const_rhs, all.bin=TRUE, all.int=TRUE)
sub_x
sub_out <- gw_dfr[which(sub_x$solution==1), c("first_name", "second_name", "now_cost", "team.y", "element_type", "total_points",    "code")]
sub_out
setwd("/Users/domin/Documents/FF/")
source("scrapeFF.R")
library(tidyverse)
scrapeFF()
knitr::opts_chunk$set(echo = TRUE, warnings = FALSE, messages = FALSE)
library(GEOquery)
library(GEOquery)
1 + 1
dset <- getGEO("GSE87411")
str(dest)
str(dset)
str(dset, max.level = 1)
dset_base <- getGEO("GSE87411")
dset <- dset_base$GSE87411_series_matrix.txt.gz
str(dset, max.level = 1)
dset
library(Biobase)
fData(dset)
library(tidyverse)
fData(dset) %>% head
fData(dset) %>% colnames
source('//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/Functions/convert-id-to-gene-symbol-with-biomart.R', encoding = 'UTF-8')
source('//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/Functions/convert-id-to-gene-symbol-with-biomart.R', encoding = 'UTF-8')
fData(dset) %>% .[1:5]
fData(dset) %>% .[1:5, 1:5]
fData(dset) %>% .[1:5, 1:6]
fData(dset) %>% .[1:5, 1:8]
fData(dset) %>% .[1:5, 1:7]
xpr <- exprs(dset)
xpr[1:5, 1:5]
xpr_base <- exprs(dset)
xpr <- merge(fData(dset)[c(1, 6)], xpr_base, by.x = "ID", by.y = 0)
xpr[1:5, 1:5]
row.names(xpr) <- xpr$GENE
xpr$ID <- NULL
x = 400451
which(xpr$GENE == x)
xpr[which(xpr$GENE == x),]
xpr[which(xpr$GENE == x),] %>% rowMeans()
xpr[which(xpr$GENE == x),] %>% rowMeans() %>% which.max()
sub_xpr <- xpr[which(xpr$GENE == x),]
sub_xpr <- xpr[which(xpr$GENE == x),]
sub_xpr
which.max(rowMeans(sub_xpr))
most_intense <- which.max(rowMeans(sub_xpr))
most_intense
sub_xpr[most_intense,]
xpr_agg <- lapply(unique(xpr$gene), function(x){
sub_xpr <- xpr[which(xpr$GENE == x),]
most_intense <- which.max(rowMeans(sub_xpr))
sub_xpr[most_intense,]
})
sub_xpr <- xpr[which(xpr$GENE == x), -1]
sub_xpr
sub_xpr <- xpr[which(xpr$GENE == x)]
sub_xpr
sub_xpr <- xpr[which(xpr$GENE == x),]
sub_xpr
rowMeans(sub_xpr)
sub_xpr <- xpr[which(xpr$GENE == x), -1]
sub_xpr
rowMeans(sub_xpr)
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr))
sub_xpr[most_intense,]
xpr_agg <- lapply(unique(xpr$gene), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr))
sub_xpr[most_intense,]
})
xpr_agg[1:2]
most_intense <- which.max(rowMeans(sub_xpr))
most_intense
most_intense <- which.max(rowMeans(sub_xpr))[[1]]
most_intense
most_intense <- which.max(rowMeans(sub_xpr))
sub_xpr[most_intense,]
xpr_agg <- lapply(unique(xpr$gene), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr))
sub_xpr[most_intense,]
})
xpr_agg
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr))
sub_xpr[most_intense,]
xpr$GENE[1:30]
x = xpr$GENE[22]
sub_xpr <- xpr[which(xpr$GENE == x), -1]
sub_xpr
most_intense <- which.max(rowMeans(sub_xpr))
most_intense
rowMeans(sub_xpr)
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
most_intense
sub_xpr[most_intense,]
sub_xpr[most_intense,]
xpr_agg <- lapply(unique(xpr$gene), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
sub_xpr[most_intense,]
})
xpr_agg
xpr_agg <- lapply(unique(xpr$gene), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
intense_xpr
})
xpr_agg
unique(xpr$gene)
unique(xpr$gene)
xpr_agg <- lapply(unique(xpr$GENE), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
intense_xpr
})
xpr_agg[1:2]
xpr_agg[1:2][1:5, ]
unique(xpr$GENE)
x <- unique(xpr$GENE)[1]
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
intense_xpr
unique(xpr$GENE)[1]
sub_xpr
which(xpr$GENE == x)
row.names(xpr)[1:4]
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
intense_xpr
xpr[1,]
xpr_agg <- lapply(unique(xpr$GENE), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
intense_xpr
})
x <- unique(xpr$GENE)[1]
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
intense_xpr
xpr_agg <- lapply(unique(xpr$GENE), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
intense_xpr
})
xpr_agg <- lapply(unique(xpr$GENE), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
intense_xpr
})
xpr_agg <- lapply(unique(xpr$GENE), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
intense_xpr
})
unique(xpr$GENE)
x <- unique(xpr$GENE)[2]
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
intense_xpr
x <- unique(xpr$GENE)[3]
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
intense_xpr
for(x in unique(xpr$GENE)){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
}
x
unique(xpr$GENE)
unique(xpr$GENE) %>% is.na %>% table()
unique(fData(dset)$GENE) %>% is.na %>% table()
na.omit(unique(xpr$GENE))
xpr_agg <- lapply(na.omit(unique(xpr$GENE)), function(x){
sub_xpr <- xpr[which(xpr$GENE == x), -1]
most_intense <- which.max(rowMeans(sub_xpr, na.rm = TRUE))
intense_xpr <- sub_xpr[most_intense,]
row.names(intense_xpr) <- x
intense_xpr
})
xpr_agg[1:2]
na.omit(unique(xpr$GENE))[1:3]
xpr_agg <- do.call(rbind, xpr_agg)
beep()
xpr_agg[1:5, 1:5]
source('//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/Functions/get-genefu-predictions.R', encoding = 'UTF-8')
source('//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/_PhD/Rbits/Functions/outersect.txt', encoding = 'UTF-8')
source('//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/Functions/convert-id-to-gene-symbol-with-biomart.R', encoding = 'UTF-8')
source('//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/Functions/outersect.txt', encoding = 'UTF-8')
source('//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/Functions/outersect.R', encoding = 'UTF-8')
source('//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic/Functions/outersect.R.txt', encoding = 'UTF-8')
colnames(xpr_agg)
pData(dset)
pData(dset) %>% colnames()
pData(dset)[1:5, 19:26]
pData(dset) %>% View()
dset
dset@phenoData@varMetadata
pheno <- pData(dset)
pData(dset)[1:5, 19:26]
pData(dset)[1:5, 1]
grep("BL", pheno$title)
xpr_BL <- xpr_agg[grep("BL", pheno$title)]
dims(xpr_BL)
dim(xpr_BL)
xpr_bl <- xpr_agg[grep("BL", pheno$title)]
xpr_pre <- xpr_agg[grep("BL", pheno$title)]
xpr_on <- xpr_agg[-grep("BL", pheno$title)]
dim(xpr_on)
nrow(pheno)
92 + 126
an.dfr <- data.frame(probe=row.names(xpr_agg), EntrezGene.ID=row.names(xpr_agg))
row.names(an.dfr) <- an.dfr$EntrezGene.ID
an.dfr
pre.otdx <- oncotypedx(data = t(xpr_pre), annot = an.dfr, do.mapping = TRUE)
on.otdx <- oncotypedx(data = t(xpr_on), annot = an.dfr, do.mapping = TRUE)
pre.otdx
library(Biobase)
library(genefu)
install.packages("genefu")
source("https://bioconductor.org/biocLite.R")
biocLite("genefu")
library(genefu)
library(genefu)
library(biomaRt)
source("https://bioconductor.org/biocLite.R")
biocLite("bioMart")
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(genefu)
library(tidyverse)
install.packages("Rcpp")
library(tidyverse)
library(GEOquery)
library(Biobase)
library(genefu)
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
.libPaths()
library(rmarkdown)
install.packages("stringi")
library(rmarkdown)
setwd("//cmvm.datastore.ed.ac.uk/igmm/sims-lab/Dominic")
setwd("Labbook/zMisc/Rosalind/R/Error Correction in Reads/")
list.files()
